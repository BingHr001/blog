<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL</title>
      <link href="/2025/04/22/mysql/"/>
      <url>/2025/04/22/mysql/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mysql部分"><a href="#Mysql部分" class="headerlink" title="Mysql部分"></a>Mysql部分</h1><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p><strong>分类：</strong></p><p>MySQL 可以按照四个角度来分类索引：</p><table><thead><tr><th>分类角度</th><th>分类类型</th></tr></thead><tbody><tr><td>数据结构</td><td>B+tree 索引、Hash 索引、Full-text 索引</td></tr><tr><td>物理存储</td><td>聚簇索引（主键索引）、二级索引（辅助索引）</td></tr><tr><td>字段特性</td><td>主键索引、唯一索引、普通索引、前缀索引</td></tr><tr><td>字段个数</td><td>单列索引、联合索引</td></tr></tbody></table><p><strong>索引失效：</strong></p><ul><li><blockquote><ol><li>对索引列进行函数运算，包含聚合函数、隐式类型转换、对索引列进行计算</li><li>or条件，前面有索引，后面没有索引</li><li>like模糊查询 左侧以及左右模糊查询 <code>like %xx</code> 和<code>like %xxx%</code></li><li>不符合最左匹配原则，联合索引失效。</li><li>数据分布区别度不大，mysql优化器自动选择是否使用索引。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="number">1.</span>联合索引 (a, b，c)，<span class="keyword">where</span>条件是 a<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> c <span class="operator">&lt;</span> <span class="number">1</span>，能用到联合索引吗？</span><br><span class="line"><span class="operator">&gt;</span>a会走，但是c不会，但是c会走索引下推</span><br><span class="line"><span class="operator">&gt;</span><span class="number">2.</span>联合索引 (a, b，c)，<span class="keyword">where</span>条件是 a<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> c <span class="operator">=</span> <span class="number">1</span>，能用到联合索引吗？</span><br><span class="line"><span class="operator">&gt;</span>a会走，但是c不会，但是c会走索引下推</span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>联合索引</strong></p><p>最左匹配原则</p></li><li><p><strong>前缀索引</strong></p><table><thead><tr><th>优点</th><th>说明</th></tr></thead><tbody><tr><td>🎯 降低索引项大小</td><td>字符串字段往往很长，只用前 N 个字符能显著减少每个索引项占用空间</td></tr><tr><td>📦 增加每页可存索引数量</td><td>减少每条索引项的大小 → 单个页能存更多条目 → 降低 B+ 树高度</td></tr><tr><td>⚡ 提高查询效率</td><td>索引页更小、更浅，查询时更快，磁盘 I&#x2F;O 更少</td></tr><tr><td>💰 降低内存消耗</td><td>索引缓存（如 InnoDB 的 buffer pool）能缓存更多索引页</td></tr></tbody></table><table><thead><tr><th>限制 &#x2F; 注意</th><th>说明</th></tr></thead><tbody><tr><td>❌ 不能完全覆盖查询</td><td>由于只索引了前 N 个字符，<strong>不具备覆盖索引的能力</strong>（比如 <code>SELECT email</code> 无法只用索引完成）</td></tr><tr><td>❗ 可能存在大量重复前缀</td><td>如果前 N 个字符的区分度不高，会导致索引效果差甚至退化成全表扫描</td></tr><tr><td>❌ 不支持某些唯一约束</td><td>前缀索引不一定能确保唯一性，<strong>不能完全代替唯一索引</strong>（尤其是对邮箱、身份证号等全字段唯一的字段）</td></tr><tr><td>🔍 查询时需匹配前缀</td><td>若 WHERE 条件不匹配前缀（如模糊查询 <code>%xxx</code>），索引会失效</td></tr></tbody></table></li></ul><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><ul><li><p><strong>全局锁</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush tables <span class="keyword">with</span> read lock;</span><br></pre></td></tr></table></figure></li><li><p><strong>表锁</strong></p><ul><li><p><strong>表共享读锁</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lock tables xxxx read;</span><br><span class="line">unlock tables;</span><br></pre></td></tr></table></figure><p>未释放之前，DQL都可以进行（其他客户端和自己都可以进行读操作）；DML置于阻塞状态（其他客户端和自己都不可以进行写操作）；不阻塞读，阻塞写。</p></li><li><p><strong>表独占写锁</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lock tables xxxx write;</span><br><span class="line">unlock tables;</span><br></pre></td></tr></table></figure><p>未释放之前，独占，只有自己可以执行DML、DQL，其他客户端两种都不可以。</p></li><li><p><strong>元数据锁</strong>（<code>Meta data lock</code>–<code>MDL</code>）</p><p>访问一张表时，自动加锁。元数据锁保证数据<strong>表结构</strong>的一致性。避免DML、DDL的冲突。</p><p>在 MySQL 5.5 中引入了 MDL，当对一张表进行增删改查的时候，加 MDL 读锁（共享）；当对表结构进行更改操作的时候，加 MDL 写锁（排他）。</p><p>当一个事务中的CRUD代码未提交时，在另一个客户端对表结构进行修改，这个客户端会处于阻塞直至事务提交。</p><table><thead><tr><th>对应 SQL</th><th>锁类型</th><th>说明</th></tr></thead><tbody><tr><td><code>lock tables xxx read / write</code></td><td><code>SHARED_READ_ONLY / SHARED_NO_READ_WRITE</code></td><td></td></tr><tr><td><code>select、select ... lock in share mode</code></td><td><code>SHARED_READ</code></td><td>与 <code>SHARED_READ</code>、<code>SHARED_WRITE</code>兼容，与 <code>EXCLUSIVE</code> 互斥</td></tr><tr><td><code>insert、update、delete、select ... for update</code></td><td><code>SHARED_WRITE</code></td><td>与 <code>SHARED_READ、SHARED_WRITE</code> 兼容，与 <code>EXCLUSIVE</code> 互斥</td></tr><tr><td><code>alter table ...</code></td><td><code>EXCLUSIVE</code></td><td>与其他的 <code>MDL</code> 都互斥</td></tr></tbody></table></li><li><p><strong>意向锁</strong></p><p>意向共享锁（IS）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ..... lock <span class="keyword">in</span> share mode;</span><br></pre></td></tr></table></figure><p>与<strong>表共享读锁</strong>兼容，与表独占写锁不兼容。</p><p>意向排他锁（IX）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span>、 <span class="keyword">update</span>、 <span class="keyword">delete</span>、 select...for <span class="keyword">update</span></span><br></pre></td></tr></table></figure><p>与表共享读锁、表独占写锁<strong>都不兼容</strong>。意向锁之间不会互斥。</p></li></ul></li><li><p><strong>行锁</strong></p><ul><li><p>行锁<code>Record Lock</code></p><p>每次操作锁住对应的数据，锁粒度最小，发生冲突的概率最低，并发度最高，用在InnoDB中。锁定单行记录，防止其他事务对此行进行Update、delete操作，在<strong>RC（Read committed），RR（Repeatable read）隔离级别下都适用。</strong></p><ul><li><p>共享锁（S）</p><p>共享锁之间是兼容的，共享锁和排他锁之间互斥，阻止其他事务获得相同数据集的排他锁。</p></li><li><p>排他锁（X）</p><p>允许获取排他锁的事务执行更新语句，阻止其他事务获得相同数据集的共享锁和排他锁。</p></li></ul><table><thead><tr><th>SQL</th><th>行锁类型</th><th>说明</th></tr></thead><tbody><tr><td><code>INSERT</code> …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td><code>UPDATE</code> …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td><code>DELETE</code> …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td><code>SELECT</code>（正常）</td><td>不加任何锁</td><td></td></tr><tr><td><code>SELECT ... LOCK IN SHARE MODE</code></td><td>共享锁</td><td>需要手动在 <code>SELECT</code> 之后加 <code>LOCK IN SHARE MODE</code></td></tr><tr><td><code>SELECT ... FOR UPDATE</code></td><td>排他锁</td><td>需要手动在 <code>SELECT</code> 之后加 <code>FOR UPDATE</code></td></tr></tbody></table><ul><li>默认情况下，<code>InnoDB</code>在 <code>REPEATABLE READ</code>事务隔离级别运行，<code>InnoDB</code>使用<code> next-key</code>锁进行搜索和索引扫描，以防止幻读。<ul><li>针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁。</li><li><code>InnoDB</code>的行锁是针对于索引加的锁，不通过索引条件检索数据，<code>InnoDB</code>会对表中所有记录加锁，<strong>升级为表锁</strong>。</li></ul></li></ul></li><li><p>间隙锁<code>Gap Lock</code>：</p><p><strong>RR（Repeatable read）隔离级别下适用</strong>。锁定索引记录的间隙（<strong>不含该记录</strong>），确保索引记录间隙不变。防止产生幻读（记录数量前后不一致）。</p><p>间隙锁可以共存，一个事务采用的间隙锁不会阻止另一个事务在同一间隙上采用间隙锁。</p></li><li><p>临键锁（<code>Next-key Lock</code>）</p><p><strong>RR（Repeatable read）隔离级别下适用，</strong>行锁和间隙锁的组合，同时锁住记录。</p><ul><li><p>索引上的<strong>等值</strong>查询(唯一索引)，给<strong>不存在</strong>的记录加锁时，优化为间隙锁 。例如，修改id为5的数据，但是id只有3和8，此时就会对3-8之间的加间隙锁（不包含3-8），直至事务提交。</p><p><img src="https://bing-1307287241.cos.ap-beijing.myqcloud.com/image_mysql.png" alt="image-20250422220639906"></p></li><li><p>索引上的<strong>等值</strong>查询(普通索引)，向右遍历时最后一个值不满足查询需求时，next-key lock 退化为间隙锁。例如，age字段是普通索引，因为是非唯一索引，因此age&#x3D;3这条记录的前面和后面都有可能继续插入age&#x3D;3的列，因此会对其进行向右遍历，找到不满足查询需求的第一个记录，将3之前和之后这段间隙锁住。</p><p><img src="https://bing-1307287241.cos.ap-beijing.myqcloud.com/image-20250422221904935.png" alt="image-20250422222330201"></p></li><li><p>索引上的范围查询(唯一索引)–会访问到不满足条件的第一个值为止。例如: 大于等于19 的id有 19 ，25，执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> id <span class="operator">&gt;=</span> <span class="number">19</span> <span class="keyword">in</span> share mode;</span><br></pre></td></tr></table></figure><p>此时加锁情况：共享锁S（对于19），临键锁（19-25之间的间隙，包含25不包含19），临键锁（25到正无穷的锁）</p><p><strong>间隙锁是左开右开、临键锁是左开右闭。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> object_schema, object_name, index_name, lock_type, lock_mode, lock_data <span class="keyword">from</span> performance_schema.data_locks;</span><br></pre></td></tr></table></figure><p><img src="https://bing-1307287241.cos.ap-beijing.myqcloud.com/image-20250422215034269.png" alt="image-20250422215034269"></p></li></ul></li></ul></li></ul><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>服务器配置</title>
      <link href="/2024/10/22/config/"/>
      <url>/2024/10/22/config/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="服务器新用户深度学习环境配置说明"><a href="#服务器新用户深度学习环境配置说明" class="headerlink" title="服务器新用户深度学习环境配置说明"></a>服务器新用户深度学习环境配置说明</h1><p>本教程仅说明相关的软件（conda、cuda等）安装配置流程，对于如conda等软件的使用本文不作说明。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>本节主要包括两部分，python开发环境的配置，和cuda与cudnn的配置（在大多数情况下不配置cudnn是不影响pytorch使用的，但在一些特殊的开发需求下，是需要安装cudnn的，因此本文默认配置cudnn）</p><p>需要注意的是部分需要使用wget命令的过程，由于服务器无法连接公网而会出现超时错误，解决方案可以在本地下载好后上传到服务器或者在服务器上使用自己的校园网账户登录以使服务器可以访问公网</p><h3 id="1-配置python环境"><a href="#1-配置python环境" class="headerlink" title="1. 配置python环境"></a>1. 配置python环境</h3><p>在服务器上使用python与在个人电脑上不同，我们不主张使用<code>/usr/bin/python</code>下的python解释器，因为它不是用户可配置的，每个服务器用户在开发不同项目时时所使用的配置均不相同，因此我们需要在使用python之前创建自己的python虚拟环境。</p><p>我们主张使用<a href="https://www.anaconda.com/products/distribution">anaconda</a>来自定义python开发所使用的虚拟环境。使用如下命令来下载适用于本服务器的<a href="https://www.anaconda.com/products/distribution">anaconda</a>安装包:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>使用下述命令来安装<a href="https://www.anaconda.com/products/distribution">anaconda</a>安装包,安装过程全部选择默认配置就好（我们不建议修改ananconda的默认安装路径），同时注意请在安装最后阶段询问是否添加环境变量时选择<code>yes</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash Anaconda3-2022.05-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>安装完毕后我们使用如下命令初始化<a href="https://www.anaconda.com/products/distribution">anaconda</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda init</span><br></pre></td></tr></table></figure><p>如果系统提示未找到conda命令，则说明环境变量没有添加成功，我们需要<code>vim ~/.bashrc</code>来手动添加环境变量。在文件的末尾追加如下内容，并保存退出（请将&lt;&gt;内替换为合适内容）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span><br><span class="line"># !! Contents within this block are managed by &#x27;conda init&#x27; !!</span><br><span class="line">__conda_setup=&quot;$(&#x27;&lt;anaconda 安装目录绝对路径&gt;/bin/conda&#x27; &#x27;shell.bash&#x27; &#x27;hook&#x27; 2&gt; /dev/null)&quot;</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    eval &quot;$__conda_setup&quot;</span><br><span class="line">else</span><br><span class="line">    if [ -f &quot;&lt;anaconda 安装目录绝对路径&gt;/etc/profile.d/conda.sh&quot; ]; then</span><br><span class="line">        . &quot;&lt;anaconda 安装目录绝对路径&gt;/etc/profile.d/conda.sh&quot;</span><br><span class="line">    else</span><br><span class="line">        export PATH=&quot;&lt;anaconda 安装目录绝对路径&gt;/bin:$PATH&quot;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line">unset __conda_setup</span><br><span class="line"># &lt;&lt;&lt; conda initialize &lt;&lt;&lt;</span><br></pre></td></tr></table></figure><p>之后刷新：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>再次初始化conda，如果初始化成功则conda安装成功。<br>对于如何使用安装好的conda创建python开发虚拟环境，以及安装pytorch等深度学习框架请自行百度，</p><h3 id="2-CUDA-及-cudnn-环境配置"><a href="#2-CUDA-及-cudnn-环境配置" class="headerlink" title="2. CUDA 及 cudnn 环境配置"></a>2. CUDA 及 cudnn 环境配置</h3><p>服务器已经安装了cuda驱动，以及主流的cuda工具包与cudnn，因此请不要跟随一些博客的描述再次安装cuda工具包和cudnn。以<code>cuda 11.3</code>为例，直接在<code>~/.bashrc</code>内追加如下内容即可,并注意在保存退出后执行<code>source ~/.bashrc</code>刷新：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/usr/local/cuda-11.3/bin:$PATH</span><br><span class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-11.3/lib64/</span><br></pre></td></tr></table></figure><p>其余可用的cuda工具包版本可以使用如下命令查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /usr/local</span><br></pre></td></tr></table></figure><p>需要注意的是所配置的cuda版本请尽量与pytorch所支持的cuda版本一直，虽然一些情况下使用不一致的版本pytorch仍然可以正常使用cuda，但这并不是鲁棒的，如果担心pytorch是否能够正常使用cuda，可以在python中使用如下代码查看输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure><h2 id="可选配置"><a href="#可选配置" class="headerlink" title="可选配置"></a>可选配置</h2><h3 id="1-设置自动执行source-bashrc"><a href="#1-设置自动执行source-bashrc" class="headerlink" title="1. 设置自动执行source ~/.bashrc,"></a>1. 设置自动执行<code>source ~/.bashrc</code>,</h3><p>在默认情况下，每次连接服务器都需要执行<code>source ~/.bashrc</code>来初始化环境，我们可以执行以下操作来让这部分操作自动完成：</p><ul><li>首先：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure></li><li>添加如下内容保存退出：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ -f ~/.bashrc ]; then</span><br><span class="line">    . ~/.bashrc</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li>最后刷新：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-配置zsh"><a href="#2-配置zsh" class="headerlink" title="2. 配置zsh"></a>2. 配置zsh</h3><p>服务器默认使用bash shell，但同时安装了zsh shell，目前zsh是公认的更加方便易用的shell，如果有需求的同学可以执行如下命令完成配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://gitee.com/shmhlsy/oh-my-zsh-install.sh/raw/master/install.sh)&quot;</span><br></pre></td></tr></table></figure><p>同时注意将<code>~/.bashrc</code>中conda和cuda的环境变量迁移到<code>~/.zshrc</code>中并刷新<code>source ~/.zshrc</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MogaNet: MULTI-ORDER GATED AGGREGATION NETWORK （ICLR 2024)</title>
      <link href="/2024/10/21/test/"/>
      <url>/2024/10/21/test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="MogaNet-MULTI-ORDER-GATED-AGGREGATION-NETWORK-（ICLR-2024）"><a href="#MogaNet-MULTI-ORDER-GATED-AGGREGATION-NETWORK-（ICLR-2024）" class="headerlink" title="MogaNet: MULTI-ORDER GATED AGGREGATION NETWORK （ICLR 2024）"></a>MogaNet: MULTI-ORDER GATED AGGREGATION NETWORK （ICLR 2024）</h3><h4 id="本文出发点："><a href="#本文出发点：" class="headerlink" title="本文出发点："></a>本文出发点：</h4><ul><li>随着卷积核大小的增加，它们在编码交互方面存在瓶颈。</li><li>多阶博弈论揭示了现代卷积网络的表示瓶颈，研究表明，现有的DNNs倾向于编码极低阶或极高阶的交互，而忽视了更具表现力和适应性的中间阶交互。</li></ul><h4 id="本文贡献："><a href="#本文贡献：" class="headerlink" title="本文贡献："></a>本文贡献：</h4><p>现代的ConvNets在ViT的启发下，通过采用大型卷积核和深度卷积操作，展示了在全局感知方面的潜力。这些网络通常包含三个主要组件：embedding stem（进行下采样，减少冗余计算）、spatial mixing block（指各种空间操作，例如自注意力）和channel mixing block（通常通过具有倒置结构的通道 MLP来实现），本文也沿用了这样的结构。通过引入多阶门控聚合（Moga）模块和通道聚合模块，旨在自适应地强调在空间和通道维度上原本会被忽略的表达性交互。</p><p>本文提出了一个纯卷积Backbone，设计了一个四阶段的网络结构，输入图像或特征首先被送入一个Embedding Stem中进行下采样并调整通道，紧接着被送入到若干个MogaBlock中得到最终的输出。</p><img src="C:\Users\BingHr\AppData\Roaming\Typora\typora-user-images\image-20240927210443410.png" alt="image-20240927210443410" style="zoom: 40%;" /><h4 id="所提出的方法："><a href="#所提出的方法：" class="headerlink" title="所提出的方法："></a>所提出的方法：</h4><img src="C:\Users\BingHr\AppData\Roaming\Typora\typora-user-images\image-20240927210551795.png" alt="image-20240927210551795" style="zoom: 40%;" /><h6 id="SA-Spatial-Aggregation-Block—-Moga-Block"><a href="#SA-Spatial-Aggregation-Block—-Moga-Block" class="headerlink" title="SA(Spatial Aggregation) Block—&gt;Moga Block"></a>SA(Spatial Aggregation) Block—&gt;Moga Block</h6><p>SA块作为SMixer(·)的实例化，如上图中(a)，SA Block由两个级联的部分组成，左侧蓝色阴影部分称为特征分解模块(简称为<strong>FD</strong>-&gt;feature decomposition )，右侧表示多阶门控聚合模块，包括两个分支，分别是门控分支$F$，上下文分支$G$，整体用公式可表示为：</p><img src="C:\Users\BingHr\AppData\Roaming\Typora\typora-user-images\image-20240928161141570.png" alt="image-20240928161141570" style="zoom:50%;" /><ul><li><strong>特征分解模块FD</strong>：（对应上图中(a)左侧蓝色区域）</li></ul><p>为了迫使网络对抗其隐含的交互强度，本文设计了FD（·）来自适应地排除被忽略的相互作用。</p><img src="C:\Users\BingHr\AppData\Roaming\Typora\typora-user-images\image-20240928161157880.png" alt="image-20240928161157880" style="zoom:50%;" /><p>FD包含了两个互补的部分，分别细粒度的局部纹理(<strong>低阶</strong>，经过1×1卷积左侧分支,对应公式中$Y$)，以及复杂的全局形状（<strong>中阶</strong>，经过1×1卷积再全局平均池化 GAP的分支，对应公式中$GAP(Y)$），再加上残差连接进行相加，得到多阶门控聚合模块的输入$Z$。$\gamma_s$表示一个权重，通过对$Y-GAP()$加权 , FD增加了空间多样性。</p><ul><li><strong>多阶门控聚合模块MOGA</strong>（对应上图中(a)右侧区域）</li></ul><p>在右侧上下文分支中利用DWConv（Depth-Wise）来集成多阶特征，采用三个并行的具有不同膨胀率的 DWConv 层，分别来获取低阶、中阶、高阶交互；首先对输入低阶特征应用5×5的DWConv，得到输出，沿通道维度按比例3：1：4分解为三组，其中中阶特征为左侧分支，高阶特征为右侧分支，之后对中阶和高阶特征分别送入5×5和7×7的DWConv层中，比例为$1&#x2F;8$的低阶特征进行相同的映射，得到的三个特征再拼接起来形成多阶上下文。相比于之前的方法只增加了很小的参数量，同时精度也有较大提高。</p><img src="C:\Users\BingHr\AppData\Roaming\Typora\typora-user-images\image-20240928191843033.png" alt="image-20240928191843033" style="zoom: 50%;" /><p>自适应聚合从上下文分支中提取的特征，使用SiLU激活函数，也就是$x·sigmoid(x)$，相对于Sigmoid有更好的稳定性。两个分支通过SiLU函数，再进行对应元素相乘，得到SA模块最终输出$Z$。经过SA模块，MoGaNet获取了更多的中阶表示，如下相互作用强度的分布图，可以看到图中MogaNet在中阶表示上的强度高于其他方法。</p><img src="C:\Users\BingHr\AppData\Roaming\Typora\typora-user-images\image-20240928195345692.png" alt="image-20240928195345692" style="zoom:50%;" /><img src="C:\Users\BingHr\AppData\Roaming\Typora\typora-user-images\image-20240928200142692.png" alt="image-20240928200142692" style="zoom:50%;" /><h6 id="CA-Channel-Aggregation-Block"><a href="#CA-Channel-Aggregation-Block" class="headerlink" title="CA(Channel Aggregation) Block"></a>CA(Channel Aggregation) Block</h6><p>CA Block是一个轻量级的通道聚合模块，可以自适应地重新分配高维隐藏空间中的通道特征。</p><ul><li><strong>通道重分配 (Channel Reallocation)</strong>:</li></ul><p>通过1x1的卷积和3x3深度卷积 (DWConv) 来重新分配通道权重，增强了最初被忽视的博弈论交互，使用GELU激活函数来增强通道间的非线性交互。</p><ul><li><strong>通道聚合 (Channel Aggregation)</strong>:</li></ul><p>通过设计一个通道减缩减投影 (Channel-Reducing Projection) 来聚合通道信息，通过学习到的通道权重$\gamma_c$来调整特征图的每个通道。</p><img src="C:\Users\BingHr\AppData\Roaming\Typora\typora-user-images\image-20240928202318469.png" alt="image-20240928202318469" style="zoom:50%;" /><p>通过聚合操作，CA Block能够强化那些在原始特征中被忽视的交互，从而提升特征的表达能力。同时，对于图(c)中，验证了普通MLP和压缩通道的MLP以及带有本文提出的CA Block的MLP的比较，相比于前两个，MLP w&#x2F;CA只需要更小的MLP比率，且同等表现下所需要的参数量更小。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/10/21/hello-world/"/>
      <url>/2024/10/21/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
